pol
pol <- as.data.frame(pol)
pol
pol[1, ] != pol[nrow(pol), ])
pol[1, ] != pol[nrow(pol), ]
source('/var/run/media/hecvi/SONY_4GP/satin/R/cutSatin.r')
cutSatin(pmgc13)
xx <- cutSatin(pmgc13)
xx
xx <- cutSatin(pmgc13)
?'&'
for( k in 1:length(pmgc13$period))
plotSatin(pmgc13c, image = k)
for( k in 1:length(pmgc13$period))
plotSatin(pmgc13c, image = k, zlim=c(12, 30), xlim=c(-115, -105), ylim=c(24, 34))
for( k in 4:10)
plotSatin(pmgc13c, image = k, xlim=c(-115, -105), ylim=c(24, 34))
for( k in 4:10)
plotSatin(pmgc13c, image = k, zlim=c(14, 30), xlim=c(-115, -105), ylim=c(24, 34))
for( k in 4:9)
plotSatin(pmgc13c, image = k, xlim=c(-115, -105), ylim=c(24, 34))
seq(1, 31, 7)
dates <- paste(rep(paste(2013, 1:10, sep="-"), each=5), seq(1, 31, 7), sep="-")
dates
ni <- length(dates)
nombres <- rep(NA, ni)
for ( k in 1:ni )
nombres[k] <- fnameOceancolor(sdate = dates[k], binPeriod="8D")
nombres <- unique(nombres)
mes <- c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10")
dates <- paste(rep(paste(2013, mes, sep="-"), each=5), seq(1, 31, 7), sep="-")
dates
ni <- length(dates)
nombres <- rep(NA, ni)
for ( k in 1:ni )
nombres[k] <- fnameOceancolor(sdate = dates[k], binPeriod="8D")
nombres <- unique(nombres)
dias <- seq(1, 31, 7)
dias
dias <- c("01", "08", "15", "22", "29")
dates <- paste(rep(paste(2013, mes, sep="-"), each=5), dias, sep="-")
ni <- length(dates)
nombres <- rep(NA, ni)
for ( k in 1:ni )
nombres[k] <- fnameOceancolor(sdate = dates[k], binPeriod="8D")
dates
source('/var/run/media/hecvi/SONY_4GP/fnameOceancolor.R')
nombres[k] <- fnameOceancolor(sdate = dates[k], binPeriod="8D")
for ( k in 1:ni )
nombres[k] <- fnameOceancolor(sdate = dates[k], binPeriod="8D")
dates[k]
charD <- function(date){
D <- as.Date(date)
yr <- as.numeric(levels(years(D)))
jd <- as.numeric(julian(D, origin=as.Date(paste(yr, "-01-01", sep="")))) + 1
if ( nchar(jd) == 2 )
jd <- paste("0", jd, sep = "")
if ( nchar(jd) == 1 )
jd <- paste("00", jd, sep = "")
chD <- paste(yr, jd, sep = "")
chD
}
charD(dates[k])
D <- as.Date(dates[k])
library(chron)
D <- as.Date(dates[k])
?as.Date
source('/var/run/media/hecvi/SONY_4GP/satin/R/cutSatin.r')
source('/var/run/media/hecvi/SONY_4GP/satin/R/cutSatin.r')
setwd("~/temp/hdf")
pmgc13 <- read.oceancolor( list.files(pattern = glob2rx("*.h5")), lons=c(-120, -100), lats=c(20, 40))
library(satin)
source('/var/run/media/hecvi/SONY_4GP/satin/R/cutSatin.r')
pmgc13 <- read.oceancolor( list.files(pattern = glob2rx("*.h5"))[1:3], lons=c(-120, -100), lats=c(20, 40))
for( k in 1:length(pmgc13$period))
plotSatin(pmgc13, image = k)
pmgc13c <- cutSatin(pmgc13)
source('/var/run/media/hecvi/SONY_4GP/satin/R/cutSatin.r')
pmgc13c <- cutSatin(pmgc13)
for( k in 1:3)
plotSatin(pmgc13c, image = k, xlim=c(-115, -105), ylim=c(24, 34))
for( k in 1:length(pmgc13$period))
plotSatin(pmgc13, image = k)
for( k in 1:3)
plotSatin(pmgc13c, image = k)
source('/var/run/media/hecvi/SONY_4GP/satin/R/cutSatin.r')
library(satin)
pmgc13 <- read.oceancolor( list.files(pattern = glob2rx("*.h5")), lons=c(-120, -100), lats=c(20, 40))
for( k in 1:length(pmgc13$period))
plotSatin(pmgc13, image = k)
pmgc13c <- cutSatin(pmgc13)
for( k in 1:12)
plotSatin(pmgc13c, image = k)
dim(pmgc13$rs.data)
dim(pmgc13c$rs.data)
dates <- paste(rep(paste(2013, 8:10, sep="-"), each=5), seq(1, 31, 7), sep="-")
ni <- length(dates)
nombres <- rep(NA, ni)
for ( k in 1:ni )
nombres[k] <- fnameOceancolor(sdate = dates[k], binPeriod="8D")
source('/var/run/media/hecvi/SONY_4GP/fnameOceancolor.R')
nombres[k] <- fnameOceancolor(sdate = dates[k], binPeriod="8D")
nombres <- unique(nombres)
nombres
ste(2013, 8:10, sep="-")
paste(2013, 8:10, sep="-")
rep(paste(2013, 8:10, sep="-"), each=5)
paste(rep(paste(2013, 8:10, sep="-"), each=5), seq(1, 31, 7), sep="-")
dates <- paste(rep(paste(2013, 8:10, sep="-"), each=5), seq(1, 31, 7), sep="-")
ni <- length(dates)
nombres <- rep(NA, ni)
for ( k in 1:ni )
nombres[k] <- fnameOceancolor(sdate = dates[k], binPeriod="8D")
nombres
unique(nombres)
nombres <- unique(nombres)
for ( j in 1:length(nombres) )
downldOceancolor(nombres[j])
source('/var/run/media/hecvi/SONY_4GP/downldOceancolor.R')
for ( j in 1:length(nombres) )
downldOceancolor(nombres[j])
library(R.utils)
for ( j in 1:length(nombres) )
downldOceancolor(nombres[j])
library(satin)
library(satin)
?cutSatin
install.packages(c("h5r", "maps", "PBSmapping", "chron", "splancs"))
install.packages("ncdf")
library(satin)
?cutSatin
library(satin)
?satinSummary
example(satinSummary)
warnings()
getwd()
library(satin)
?read.oceancolor
examplor(read.oceancolor)
example(read.oceancolor)
fi <- list.files("E:/Imagenes HDF/AquaModis SST/", pattern = glob2rx("*.h5"))
fi
fi <- list.files(path = "E:/Imagenes HDF/AquaModis SST/", pattern = glob2rx("*.h5"))
fi
)
list.files(path = "E:/Imagenes HDF/AquaModis SST/")
fi <- list.files(path = "E:/Imagenes HDF/AquaModis SST/", pattern = glob2rx("*.hdf5"))
fi
lats <- c(20, 25)
lons <- c(-115, -110)
mSST <- read.oceancolor(fi[1:3], lats, lons)
setwd("E:/Imagenes HDF//AquaModis SST")
lats <- c(20, 25)
lons <- c(-115, -110)
mSST <- read.oceancolor(fi[1:3], lats, lons)
setwd("C:/Users//Raul/Documents/")
plotSatin(mSST)
mSST
mSST$period
as.Date(mSST$period)
?as.Date
?satinSummary
example(satinSummary)
satinSummary(datos.sst)
satinSummary(datos.sst, plot = T)
mSST$period
datos.sst$period
satinSummary(mSST, plot = T)
library(satin)
?attrib.oceancolor
library(satin)
library(satin)
source('/var/run/media/hecvi/SONY_4GP/fnameOceancolor.R')
library(satin)
data(dataSetList)
dataSetList
dataSetQuery()
dataSetQuery(parameter="tem")
dataSetQuery(parameter="tem", resolution = "0.25de")
dataSetQuery(parameter="tem", resolution = "0.25deg")
dataSetQuery(parameter="tem", resolution = "0.25degrees")
dataSetQuery(parameter="tem", resolution = 0.25)
dataSetQuery(parameter="tem", resolution = "0.25degrees")
dataSetQuery(parameter="tem", resolution = "0.1degrees")
dataSetQuery(parameter="tem", resolution = "0.05degrees")
?agrep
dataSetQuery(dataset=40)
ds <- dataSetQuery(dataset=40)
timePeriod(ds)
?dbsst
library(satin)
library(satin)
library(maptools)
library(PBSmapping)
library(sp)
library(rgdal)
library(gdata)
source("/home/hecvi/R/Fun/recodeCoord.R")
setwd("G:/Daniel")
library(maptools)
library(PBSmapping)
library(sp)
library(rgdal)
library(gdata)
source("/home/hecvi/R/Fun/recodeCoord.R")
load("mapa_holbox.RData")
library(satin)
lons <- c(-90, -84)
lats <- c(19, 24)
lf <- list.files( pattern=glob2rx("*.hdf") )
lf
sst <-  read.oceancolor( file = lf[1], lons, lats)
hdf4to5 <- function(nom.hdf4, path2exe=NULL)
{
nom.hdf5 <- paste(nom.hdf4, "5", sep="")
if (is.null(path2exe))
path2exe="C:/Progra~1/TheHDFGroup/h4h5tools/2.2.1/bin/"
h4h5cmd <- paste(path2exe, "h4toh5", sep="")
system(paste(h4h5cmd, nom.hdf4, nom.hdf5, sep=" "))
}
h4toh5(lf)
hdf4to5(lf)
lf
for ( k in 1:length(lf))
h4toh5(lf[k])
for ( k in 1:length(lf))
hdf4to5(lf[k])
nom.hdf4 =lf[1]
nom.hdf4
nom.hdf5 <- paste(nom.hdf4, "5", sep="")
nom.hdf5
path2exe="C:/Progra~1/TheHDFGroup/h4h5tools/2.2.1/bin/"
h4h5cmd <- paste(path2exe, "h4toh5", sep="")
system(paste(h4h5cmd, nom.hdf4, nom.hdf5, sep=" "))
lons <- c(-90, -84)
lats <- c(19, 24)
lf <- list.files( pattern=glob2rx("*.h5") )
sst <-  read.oceancolor( file = lf, lons, lats)
plotSatin(sst)
x11()
plotSatin(sst)
plotSatin(sst, map=holbox)
args(satin)
args(plotSatin)
sst$period
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(2, 2, 2, 2))
for (k in 1:4){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
lons <- c(-87.5, -86.5)
lats <- c(21, 22)
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(2, 2, 2, 2))
for (k in 1:4){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(0, 0, 0, 0))
for (k in 1:4){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
sst$period
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(0, 0, 0, 0))
for (k in 6:9){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
for (k in 6:9){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(0, 0, 0, 0))
for (k in 1:4){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
for (k in 6:9){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(0, 0, 0, 0))
for (k in 1:4){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
x11()
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(0, 0, 0, 0))
for (k in 6:9){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
x11()
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(0, 0, 0, 0))
for (k in 1:4){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats)
}
args(plotSatin)
x11()
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(0, 0, 0, 0))
for (k in 6:9){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats, main.pos="bl")
}
x11()
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(0, 0, 0, 0))
for (k in 1:4){
plotSatin(sst, image=k, map=holbox, xlim=lons, ylim=lats, main.pos="bl")
}
library(maptools)
library(PBSmapping)
library(sp)
library(rgdal)
library(gdata)
source("/home/hecvi/R/Fun/recodeCoord.R")
# cargar mapa previamente creado
load("mapa_holbox.RData")
# Mapa
# x11()
plot(holbox, col="khaki", pbg="blue", xaxs="i", yaxs="i",
axes=TRUE, lty=1, border="grey")
grid(col="grey")
box()
# ejemplo para dibujar Ã¡rea "azul"
polygon(x=c(-86.66, -86.66, -86.58, -86.58, -86.66),
y=c(21.41, 21.58, 21.58, 21.41, 21.41))
# EXPORTAR Shapefile para visualizar en QGIS
IDs <- sapply(slot(holbox, "polygons"), function(x) slot(x, "ID"))
df <- data.frame(rep(0, length(IDs)), row.names=IDs)
holbox.spdf <- SpatialPolygonsDataFrame(holbox, df)
writePolyShape(holbox.spdf, fn="holbox")
################################################################################
# 'transectos'
coordUTM_Holbox <- read.delim("coordUTM_Holbox.txt")
#plot(coordUTM_Holbox)
# transformar UTM a lon-lat
coordinates(coordUTM_Holbox) <- c("Lon", "Lat")
proj4string(coordUTM_Holbox) <- CRS("+proj=utm +zone=14 +datum=WGS84")
coord_Holbox <- spTransform(coordUTM_Holbox, CRS("+proj=longlat"))
points(coord_Holbox)
coord_Holbox
################################################################################
# Importar datos
manta <- read.xls("Datos (20-02-14).xlsx", sheet = 1)
names(manta)[2] <- "AÃ±o"
manta <- manta[complete.cases(manta$coordLON), ] # hay una sin posiciÃ³n
# coordenadas de interÃ©s
lons <- c(-87.5, -86.5)
lats <- c(21, 22)
plot(holbox, col="khaki", pbg="blue", xlim=lons, ylim=lats,
xaxs="i", yaxs="i", axes=TRUE, lty=1, border="grey")
grid(col="grey")
box()
points(manta[manta$AÃ±o == 2008, c('coordLON', 'coordLAT')], pch=16, col=rgb(0, 1, 0, 0.4), cex=2)
points(manta[manta$AÃ±o == 2010, c('coordLON', 'coordLAT')], pch=16, col=rgb(0, 0, 1, 0.4), cex=2)
# Figura por mes
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(2, 2, 2, 2))
#layout.show(4)
mes <- c("mayo", "junio", "julio", "agosto")
for (k in 5:8){
plot(holbox, col="khaki", pbg="blue", xlim=lons, ylim=lats,
xaxs="i", yaxs="i", axes=TRUE, lty=1, border="grey")
text(x=-86.7, y=21.9, mes[k-4])
grid(col="grey")
box()
p08 <- manta[manta$AÃ±o == 2008 & manta$Mes == k , c('coordLON', 'coordLAT')]
p10 <- manta[manta$AÃ±o == 2010 & manta$Mes == k , c('coordLON', 'coordLAT')]
if ( dim(p08)[1] > 0 ){
p08 <- recodeCoord(lon = p08$coordLON, lat = p08$coordLAT)
# addBubbles()
# Requiere 4 columnas: EID, X, Y y Z, donde EID es la secuencia de puntos,
# X y Y son la longitud y la latitud y Z es la "abundancia"
mb <- data.frame(EID=1:nrow(p08), p08)
colnames(mb)[2:4] <- c("X", "Y", "Z")
if (nrow(mb)==1) mb <- rbind(mb, data.frame(EID=2, X=0, Y=0, Z=0))
class(mb) <- c("EventData",  "data.frame")
addBubbles(mb, symbol.bg=rgb(0,1,0,.4), max.size=0.5, z.max=18,
legend.type="nested", symbol.zero="+", legend.pos=NULL, col="black")
}
if ( dim(p10)[1] > 0 ){
p10 <- recodeCoord(lon = p10$coordLON, lat = p10$coordLAT)
# addBubbles()
# Requiere 4 columnas: EID, X, Y y Z, donde EID es la secuencia de puntos,
# X y Y son la longitus y la latitud y Z es la "captura"
mb <- data.frame(EID=1:nrow(p10), p10)
colnames(mb)[2:4] <- c("X", "Y", "Z")
if (nrow(mb)==1) mb <- rbind(mb, data.frame(EID=2, X=0, Y=0, Z=0))
class(mb) <- c("EventData",  "data.frame")
addBubbles(mb, symbol.bg=rgb(0,0,1,.4), max.size=0.5, z.max=18,
legend.type="nested", symbol.zero="+", col="black",
legend.title="No. de mantas", legend.breaks=c(2, 10, 20))
}
}
recodeCoord <-
function(lon, lat, extent=1)
{
xt <- extent/60
x <- lon
y <- lat
xs <- seq( floor(min(x)), ceiling(max(x)), xt )
if (max(x) > xs[length(xs)])
xs <- c(xs, xs[length(xs)] + xt)
ys <- seq( floor(min(y)), ceiling(max(y)), xt )
if (max(y) > ys[length(ys)])
ys <- c(ys, ys[length(ys)] + xt)
pmx <- xs[-length(xs)] + xt/2
pmy <- ys[-length(ys)] + xt/2
nlon <- x
for (i in 1:length(x)) {
for(j in 1:length(xs)) {
if(x[i] >= xs[j] & x[i] < xs[j+1])
nlon[i] <- pmx[j]
}
}
nlat <- y
for (i in 1:length(y)) {
for(j in 1:length(ys)) {
if(y[i] >= ys[j] & y[i] < ys[j+1])
nlat[i] <- pmy[j]
}
}
sx <- aggregate(nlon, by=list(nlon, nlat), length)
names(sx) <- c("lon", "lat", "frec")
sx
}
library(maptools)
library(PBSmapping)
library(sp)
library(rgdal)
library(gdata)
source("/home/hecvi/R/Fun/recodeCoord.R")
# cargar mapa previamente creado
load("mapa_holbox.RData")
# Mapa
# x11()
plot(holbox, col="khaki", pbg="blue", xaxs="i", yaxs="i",
axes=TRUE, lty=1, border="grey")
grid(col="grey")
box()
# ejemplo para dibujar Ã¡rea "azul"
polygon(x=c(-86.66, -86.66, -86.58, -86.58, -86.66),
y=c(21.41, 21.58, 21.58, 21.41, 21.41))
# EXPORTAR Shapefile para visualizar en QGIS
IDs <- sapply(slot(holbox, "polygons"), function(x) slot(x, "ID"))
df <- data.frame(rep(0, length(IDs)), row.names=IDs)
holbox.spdf <- SpatialPolygonsDataFrame(holbox, df)
writePolyShape(holbox.spdf, fn="holbox")
################################################################################
# 'transectos'
coordUTM_Holbox <- read.delim("coordUTM_Holbox.txt")
#plot(coordUTM_Holbox)
# transformar UTM a lon-lat
coordinates(coordUTM_Holbox) <- c("Lon", "Lat")
proj4string(coordUTM_Holbox) <- CRS("+proj=utm +zone=14 +datum=WGS84")
coord_Holbox <- spTransform(coordUTM_Holbox, CRS("+proj=longlat"))
points(coord_Holbox)
coord_Holbox
################################################################################
# Importar datos
manta <- read.xls("Datos (20-02-14).xlsx", sheet = 1)
names(manta)[2] <- "AÃ±o"
manta <- manta[complete.cases(manta$coordLON), ] # hay una sin posiciÃ³n
# coordenadas de interÃ©s
lons <- c(-87.5, -86.5)
lats <- c(21, 22)
plot(holbox, col="khaki", pbg="blue", xlim=lons, ylim=lats,
xaxs="i", yaxs="i", axes=TRUE, lty=1, border="grey")
grid(col="grey")
box()
points(manta[manta$AÃ±o == 2008, c('coordLON', 'coordLAT')], pch=16, col=rgb(0, 1, 0, 0.4), cex=2)
points(manta[manta$AÃ±o == 2010, c('coordLON', 'coordLAT')], pch=16, col=rgb(0, 0, 1, 0.4), cex=2)
# Figura por mes
layout(matrix(1:4, ncol=2, byrow=TRUE), widths=rep(1/2, 2), heights=rep(1/2, 2))
par(mar=c(2, 2, 2, 2))
#layout.show(4)
mes <- c("mayo", "junio", "julio", "agosto")
for (k in 5:8){
plot(holbox, col="khaki", pbg="blue", xlim=lons, ylim=lats,
xaxs="i", yaxs="i", axes=TRUE, lty=1, border="grey")
text(x=-86.7, y=21.9, mes[k-4])
grid(col="grey")
box()
p08 <- manta[manta$AÃ±o == 2008 & manta$Mes == k , c('coordLON', 'coordLAT')]
p10 <- manta[manta$AÃ±o == 2010 & manta$Mes == k , c('coordLON', 'coordLAT')]
if ( dim(p08)[1] > 0 ){
p08 <- recodeCoord(lon = p08$coordLON, lat = p08$coordLAT)
# addBubbles()
# Requiere 4 columnas: EID, X, Y y Z, donde EID es la secuencia de puntos,
# X y Y son la longitud y la latitud y Z es la "abundancia"
mb <- data.frame(EID=1:nrow(p08), p08)
colnames(mb)[2:4] <- c("X", "Y", "Z")
if (nrow(mb)==1) mb <- rbind(mb, data.frame(EID=2, X=0, Y=0, Z=0))
class(mb) <- c("EventData",  "data.frame")
addBubbles(mb, symbol.bg=rgb(0,1,0,.4), max.size=0.5, z.max=18,
legend.type="nested", symbol.zero="+", legend.pos=NULL, col="black")
}
if ( dim(p10)[1] > 0 ){
p10 <- recodeCoord(lon = p10$coordLON, lat = p10$coordLAT)
# addBubbles()
# Requiere 4 columnas: EID, X, Y y Z, donde EID es la secuencia de puntos,
# X y Y son la longitus y la latitud y Z es la "captura"
mb <- data.frame(EID=1:nrow(p10), p10)
colnames(mb)[2:4] <- c("X", "Y", "Z")
if (nrow(mb)==1) mb <- rbind(mb, data.frame(EID=2, X=0, Y=0, Z=0))
class(mb) <- c("EventData",  "data.frame")
addBubbles(mb, symbol.bg=rgb(0,0,1,.4), max.size=0.5, z.max=18,
legend.type="nested", symbol.zero="+", col="black",
legend.title="No. de mantas", legend.breaks=c(2, 10, 20))
}
}
library(satin)
